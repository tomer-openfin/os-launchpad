import * as React from 'react';
import * as Yup from 'yup';

import * as passwordIcon from '../../assets/Eye.svg';

import { Color } from '../../styles';

import { validatePhone } from '../../utils/validators';

import FormField from '../FormField';
import FormFooter from '../FormFooter';
import ScrollGrid, { Form, PasswordIconWrapper, RowWrapper } from '../Responsive';
import SvgIcon from '../SvgIcon';

export const baseSchema = {
  email: Yup.string()
    .email('Valid email required')
    .required('Required'), // read-only after creation
  firstName: Yup.string().required('Required'),
  id: Yup.string().notRequired(), // generated by BE
  lastName: Yup.string().required('Required'),
  middleInitial: Yup.string().notRequired(),
  phone: Yup.string().required('Required'),
  tmpPassword: Yup.string().required('Required'),
  username: Yup.string().notRequired(), // generated by BE
};

export const newUserSchema = Yup.object().shape(baseSchema);

// tmpPassword field not needed to edit users
const { tmpPassword, ...schema } = baseSchema;

export const editUserSchema = Yup.object().shape(schema);

interface Props {
  handleSubmit: () => void;
  handleCancel: () => void;
  isSubmitting: boolean;
  isValid: boolean;
  withPasswordField?: boolean;
}

interface State {
  isPasswordShown: boolean;
}

const defaultState: State = {
  isPasswordShown: false,
};

class UserForm extends React.Component<Props, State> {
  state: State = defaultState;

  togglePasswordFieldType = () => this.setState(prevState => ({ isPasswordShown: !prevState.isPasswordShown }));

  render() {
    const { handleSubmit, handleCancel, isSubmitting, isValid, withPasswordField } = this.props;
    const { isPasswordShown } = this.state;

    return (
      <Form onSubmit={handleSubmit}>
        <ScrollGrid>
          <RowWrapper secondElementWidth="55px">
            <FormField label="First Name" type="text" name="firstName" placeholder="Enter first name" />

            <FormField label="MI" type="text" name="middleInitial" />
          </RowWrapper>

          <FormField label="Last Name" type="text" name="lastName" placeholder="Enter last name" />

          <FormField label="Phone Number" type="text" name="phone" maxLength="10" validate={validatePhone} placeholder="Enter phone number" />

          <FormField label="Email" type="email" name="email" placeholder="Enter email" disabled={!withPasswordField} />

          {withPasswordField && (
            <FormField label="Password" type={isPasswordShown ? 'text' : 'password'} name="tmpPassword" placeholder="Enter password">
              <PasswordIconWrapper>
                <SvgIcon
                  color={isPasswordShown ? Color.URANUS : Color.COMET}
                  hoverColor={Color.JUPITER}
                  onClick={this.togglePasswordFieldType}
                  imgSrc={passwordIcon}
                  size={25}
                />
              </PasswordIconWrapper>
            </FormField>
          )}
        </ScrollGrid>

        <FormFooter isSubmitting={isSubmitting} submitDisabled={isSubmitting || !isValid} handleCancel={handleCancel} />
      </Form>
    );
  }
}

export default UserForm;
