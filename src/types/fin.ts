// import { Channel } from 'openfin-fdc3';
import { Workspace, WorkspaceApp } from 'openfin-layouts/dist/client/workspaces';
import { UnPromisfy } from './utils';

export type ApplicationBaseEvent = fin.ApplicationBaseEvent;
export type Bounds = fin.Bounds;
export type Identity = fin.Identity;
export type MonitorInfo = fin.MonitorInfo;
export type MonitorDetails = MonitorInfo['primaryMonitor'];
export type OpenFinApplication = fin.OpenFinApplication;
export type OpenFinApplicationEventType = fin.OpenFinApplicationEventType;
export type OpenFinApplicationInfo = fin.LaunchInfo;
export type OpenFinWindow = fin.OpenFinWindow;
export type PointTopLeft = fin.PointTopLeft;
export type SystemBaseEvent = fin.SystemBaseEvent;
export type SystemWindowInfo = fin.SystemWindowInfo;
export type Transition = fin.Transition;
export type TrayIconClickedEvent = fin.TrayIconClickedEvent;
export type WindowBaseEvent = fin.WindowBaseEvent;
export type WindowBoundsEvent = fin.WindowBoundsEvent;
export type WindowGroupChangedEvent = fin.WindowGroupChangedEvent;
export type Workspace = Workspace;
export type WorkspaceApp = WorkspaceApp;
export type WindowInfo = fin.WindowInfo;
export type WindowDetail = fin.WindowDetail;
export type CustomDataWithChannels = WorkspaceApp['customData'] & { channels: { [channelColor: string]: Identity[] } };
export type FinWindowV2 = UnPromisfy<ReturnType<typeof fin.Window.wrap>>;

// Taken from openfin-fdc3@0.1.0
export type ChannelId = string;
export interface Channel {
  /**
   * Would be generated by the service - what you pass to the API calls below
   */
  id: ChannelId;
  /**
   * Uniquely defines each channel type
   *
   * Currently two channel types. More may be added in the future.
   */
  type: 'global' | 'user';
  /**
   * A user-readable name for this channel, e.g: "Red"
   */
  name: string;
  /**
   * The colour that should be associated within this channel when displaying this channel in a UI
   */
  color: number;
}
export interface ChannelChangedPayload {
  identity: Identity;
  channel: Channel;
  previousChannel?: Channel;
}
